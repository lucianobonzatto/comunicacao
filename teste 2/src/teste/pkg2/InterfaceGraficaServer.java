/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package teste.pkg2;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.*;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author lucia
 */
public class InterfaceGraficaServer extends javax.swing.JFrame{
    
    private Server server;
    
    /**
     * Creates new form InterfaceGraficaServer
     */
    public InterfaceGraficaServer(int port) throws IOException {
        System.out.println("port = " + port);
        server = new Server(port);      //cria o server
        server.start();                 //inicialização das threads
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelGrafico = new javax.swing.JPanel();
        enviarButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mensagemTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        criptografiaTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        binarioTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        algoritmoTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanelGraficoLayout = new javax.swing.GroupLayout(jPanelGrafico);
        jPanelGrafico.setLayout(jPanelGraficoLayout);
        jPanelGraficoLayout.setHorizontalGroup(
            jPanelGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelGraficoLayout.setVerticalGroup(
            jPanelGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 251, Short.MAX_VALUE)
        );

        enviarButton.setText("enviar");
        enviarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarButtonActionPerformed(evt);
            }
        });
        enviarButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enviarButtonKeyPressed(evt);
            }
        });

        jLabel1.setText("msg");

        mensagemTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mensagemTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mensagemTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mensagemTextFieldKeyTyped(evt);
            }
        });

        jLabel2.setText("cript");

        criptografiaTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criptografiaTextFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("bin");

        binarioTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarioTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("alg");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(binarioTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                    .addComponent(algoritmoTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mensagemTextField)
                    .addComponent(criptografiaTextField, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(mensagemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(criptografiaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(binarioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(algoritmoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(enviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private ArrayList<Boolean> strToBinary(String s) throws UnsupportedEncodingException
    {
        //retorna o valor da string em ascII extendido 
        int n = s.length();
        ArrayList<Boolean> palavra = new ArrayList<>();
        for (int i = 0; i < n; i++)
        {
            int val;
            ArrayList<Boolean> letra = new ArrayList<>();
            
            val = (int) s.charAt(i);
            while (val > 0){            //slgoritmo padrao de int para bin
                if (val % 2 == 1){
                    letra.add(true);
                }
                else
                    letra.add(false);
                val /= 2;
            }
            while(letra.size() < 8)     //garante que a letra tenha 8 bits
            {
                letra.add(false);
            }
            for(int j=7; j>=0; j--)      //adiciona a letra a palavra
            {
                palavra.add(letra.get(j));
            }
        }
        return palavra;
    }
    
    private String arrayToStr(ArrayList<Boolean> palavra)
    {
        String output = "";
        for(int i=0; i<palavra.size();i++)
        {
            if(palavra.get(i)){
                output += '1';
            }
            else{
                output += '0';
            }
        }
        return output;
    }
    
    private String criptografia(String msg)
    {
        String output = "";
        for (int i = 0; i < msg.length(); i++)
        {
            output += (char)(((int)msg.charAt(i) + msg.length()+90)%255);
        }
        return output;
    }
    
    private ArrayList<Integer> binToAlg(ArrayList<Boolean> bin)
    {
        //|      |  +   |  -   |
        //| next | posi | nega |
        //|  00  |  +1  |  -1  |
        //|  01  |  +3  |  -3  |
        //|  10  |  -1  |  +1  |
        //|  11  |  -3  |  +3  |
        ArrayList<Integer> alg = new ArrayList<>();
        boolean sigAnterio = true; //true é positivo false é negativo
        
        for(int i=0; i<bin.size(); i+=2)
        {
            if(bin.get(i) == false && bin.get(i+1) == false){       //00
                if(sigAnterio){
                    alg.add(1);
                    sigAnterio = true;
                }
                else{
                    alg.add(-1);
                    sigAnterio = false;
                }
            }
            else if(bin.get(i) == false && bin.get(i+1) == true){   //01
                if(sigAnterio){
                    alg.add(3);
                    sigAnterio = true;
                }
                else{
                    alg.add(-3);
                    sigAnterio = false;
                }
            }
            else if(bin.get(i) == true && bin.get(i+1) == false){   //10
                if(sigAnterio){
                    alg.add(-1);
                    sigAnterio = false;
                }
                else{
                    alg.add(1);
                    sigAnterio = true;
                }
            }
            else if(bin.get(i) == true && bin.get(i+1) == true){    //11
                if(sigAnterio){
                    alg.add(-3);
                    sigAnterio = false;
                }
                else{
                    alg.add(3);
                    sigAnterio = true;
                }
            }
        }
        
        return alg;
    }
    
    private XYDataset createDataset(ArrayList<Integer> alg)
    {
        
        XYSeries s1 = new XYSeries("S1");
        
        for(int i = 0; i < alg.size(); i++)
        {
            s1.add(i, alg.get(i));      //inclui duas vezes para ficar quadrado
            s1.add(i+1, alg.get(i));
        }
        XYSeriesCollection dataset = new XYSeriesCollection();
        
        dataset.addSeries(s1);
        return dataset;
    }
    
    private void criarGrafico(ArrayList<Integer> alg)
    {
        XYDataset cds = createDataset(alg);
        String titulo = "Código De Linha";
        String eixoy = "Tensão (V)";
        String txt_legenda = "Tempo";
        boolean legenda = false;
        boolean tooltips = false;
        boolean urls = true;
        JFreeChart graf = ChartFactory.createXYLineChart(titulo, txt_legenda, eixoy, cds, PlotOrientation.VERTICAL, legenda, tooltips, urls);
        
        ChartPanel myChartPanel = new ChartPanel(graf, true);
        myChartPanel.setSize(jPanelGrafico.getWidth(), jPanelGrafico.getHeight());
        myChartPanel.setVisible(true);
       // myChartPanel.setAutoscrolls(true);
        jPanelGrafico.removeAll();
        jPanelGrafico.add(myChartPanel);
        jPanelGrafico.revalidate();
        jPanelGrafico.repaint();
    }
    
    private void enviar(){
        //faz toda a transformaçcao desde a mensagem até o alg Linha e envia para o cliente
        try {
            String msg = mensagemTextField.getText();       //pega a mensagem
            String cript = criptografia(msg);               //criptografa a mensagem
            ArrayList<Boolean> bin = strToBinary(cript);    //transforma para binario
            ArrayList<Integer> alg = binToAlg(bin);         //constroi o alg linha com 2B1Q
            
            System.out.println("msg = " + msg);
            System.out.println("cript = " + cript);
            System.out.println("bin = " + arrayToStr(bin));
            System.out.println("alg = " + alg);
            criarGrafico(alg);
            
            binarioTextField.setText(arrayToStr(bin));
            criptografiaTextField.setText(cript);
            algoritmoTextField.setText(alg.toString());
            
            Collections.reverse(alg);
            server.sendMsg(alg);
        } catch (IOException ex) {
            //ninguem conectado
            Logger.getLogger(InterfaceGraficaServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void enviarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarButtonActionPerformed
        enviar();
    }//GEN-LAST:event_enviarButtonActionPerformed

    private void binarioTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binarioTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_binarioTextFieldActionPerformed

    private void criptografiaTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criptografiaTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_criptografiaTextFieldActionPerformed

    private void enviarButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enviarButtonKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_enviarButtonKeyPressed

    private void mensagemTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mensagemTextFieldKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_mensagemTextFieldKeyPressed

    private void mensagemTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mensagemTextFieldKeyReleased
        // TODO add your handling code here:
        //enviar();
    }//GEN-LAST:event_mensagemTextFieldKeyReleased

    private void mensagemTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mensagemTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_mensagemTextFieldKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField algoritmoTextField;
    private javax.swing.JTextField binarioTextField;
    private javax.swing.JTextField criptografiaTextField;
    private javax.swing.JButton enviarButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelGrafico;
    private javax.swing.JTextField mensagemTextField;
    // End of variables declaration//GEN-END:variables
}
